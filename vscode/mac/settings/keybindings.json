// 将键绑定放在此文件中以覆盖默认值auto[]
[
    {
        "key": "ctrl+b",
        "command": "workbench.action.tasks.build",
        "when": "taskCommandsRegistered"
    },
    {
        "key": "shift+cmd+b",
        "command": "-workbench.action.tasks.build",
        "when": "taskCommandsRegistered"
    },
    {
        "key": "shift+cmd+b",
        "command": "workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "cmd+b",
        "command": "-workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "cmd+; cmd+c",
        "command": "cursorLeft",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+b",
        "command": "-cursorLeft",
        "when": "textInputFocus"
    },
    {
        "key": "cmd+v cmd+b",
        "command": "extension.vim_ctrl+b",
        "when": "editorTextFocus && vim.active && vim.use<C-b> && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
        "key": "ctrl+b",
        "command": "-extension.vim_ctrl+b",
        "when": "editorTextFocus && vim.active && vim.use<C-b> && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
        "key": "shift+cmd+a",
        "command": "workbench.action.showCommands"
    },
    {
        "key": "shift+cmd+p",
        "command": "-workbench.action.showCommands"
    },
    {
        "key": "ctrl+j",
        "command": "-extension.vim_ctrl+j",
        "when": "editorTextFocus && vim.active && vim.use<C-j> && !inDebugRepl"
    },
    {
        "key": "ctrl+cmd+j",
        "command": "editor.action.joinLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+j",
        "command": "-editor.action.joinLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+k",
        "command": "-extension.vim_ctrl+k",
        "when": "editorTextFocus && vim.active && vim.use<C-k> && !inDebugRepl"
    },
    {
        "key": "ctrl+k",
        "command": "-deleteAllRight",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+t",
        "command": "-extension.vim_ctrl+t",
        "when": "editorTextFocus && vim.active && vim.use<C-t> && !inDebugRepl"
    },
    {
        "key": "ctrl+cmd+t",
        "command": "editor.action.transposeLetters",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+t",
        "command": "-editor.action.transposeLetters",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "cmd+k",
        "command": "-workbench.action.terminal.clear",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "shift+cmd+k",
        "command": "workbench.action.openGlobalKeybindings"
    },
    {
        "key": "cmd+k cmd+s",
        "command": "-workbench.action.openGlobalKeybindings"
    },
    {
        "key": "shift+cmd+e",
        "command": "actions.findWithSelection"
    },
    {
        "key": "cmd+e",
        "command": "-actions.findWithSelection"
    },
    {
        "key": "shift+alt+cmd+t",
        "command": "workbench.action.showAllSymbols"
    },
    {
        "key": "cmd+t",
        "command": "-workbench.action.showAllSymbols"
    },
    {
        "key": "shift+alt+v",
        "command": "workbench.action.togglePanel"
    },
    {
        "key": "cmd+j",
        "command": "-workbench.action.togglePanel"
    },
    {
        "key": "a n",
        "command": "jupyter.insertCellAbove",
        "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused"
    },
    {
        "key": "ctrl+; a",
        "command": "-jupyter.insertCellAbove",
        "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused"
    },
    {
        "key": "b n",
        "command": "jupyter.insertCellBelow",
        "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused"
    },
    {
        "key": "ctrl+; b",
        "command": "-jupyter.insertCellBelow",
        "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused"
    },
    {
        "key": "d n",
        "command": "jupyter.deleteCells",
        "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused"
    },
    {
        "key": "ctrl+; x",
        "command": "-jupyter.deleteCells",
        "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused"
    },
    {
        "key": "shift+alt+r",
        "command": "rerunSearchEditorSearch",
        "when": "inSearchEditor"
    },
    {
        "key": "shift+cmd+r",
        "command": "-rerunSearchEditorSearch",
        "when": "inSearchEditor"
    },
    {
        "key": "shift+cmd+r",
        "command": "code-runner.run"
    },
    {
        "key": "ctrl+alt+n",
        "command": "-code-runner.run"
    },
    {
        "key": "shift+alt+`",
        "command": "workbench.action.terminal.new",
        "when": "terminalProcessSupported || terminalWebExtensionContributedProfile"
    },
    {
        "key": "ctrl+shift+`",
        "command": "-workbench.action.terminal.new",
        "when": "terminalProcessSupported || terminalWebExtensionContributedProfile"
    },
    {
        "key": "ctrl+`",
        "command": "workbench.action.terminal.toggleTerminal",
        "when": "terminal.active"
    },
    {
        "key": "ctrl+`",
        "command": "-workbench.action.terminal.toggleTerminal",
        "when": "terminal.active"
    },
    {
        "key": "shift+alt+t",
        "command": "workbench.action.reopenClosedEditor"
    },
    {
        "key": "shift+cmd+t",
        "command": "-workbench.action.reopenClosedEditor"
    },
    {
        "key": "shift+cmd+t",
        "command": "leetcode.testSolution"
    },
    {
        "key": "shift+cmd+s",
        "command": "leetcode.submitSolution"
    },
    {
        "key": "shift+alt+s",
        "command": "workbench.action.files.saveAs"
    },
    {
        "key": "shift+cmd+s",
        "command": "-workbench.action.files.saveAs"
    },
    {
        "key": "ctrl+alt+s",
        "command": "workbench.action.files.saveLocalFile",
        "when": "remoteFileDialogVisible"
    },
    {
        "key": "shift+cmd+s",
        "command": "-workbench.action.files.saveLocalFile",
        "when": "remoteFileDialogVisible"
    },
    {
        "key": "ctrl+k",
        "command": "workbench.action.previousEditor"
    },
    {
        "key": "shift+cmd+[",
        "command": "-workbench.action.previousEditor"
    },
    {
        "key": "ctrl+j",
        "command": "workbench.action.nextEditor"
    },
    {
        "key": "shift+cmd+]",
        "command": "-workbench.action.nextEditor"
    },
    {
        "key": "ctrl+f",
        "command": "-extension.vim_ctrl+f",
        "when": "editorTextFocus && vim.active && vim.use<C-f> && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
        "key": "ctrl+shift+f",
        "command": "workbench.view.explorer",
        "when": "viewContainer.workbench.view.explorer.enabled"
    },
    {
        "key": "shift+cmd+e",
        "command": "-workbench.view.explorer",
        "when": "viewContainer.workbench.view.explorer.enabled"
    },
    {
        "key": "ctrl+t",
        "command": "workbench.action.terminal.focus"
    },
    {
        "key": "ctrl+e",
        "command": "-cursorLineEnd",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+e",
        "command": "-extension.vim_ctrl+e",
        "when": "editorTextFocus && vim.active && vim.use<C-e> && !inDebugRepl"
    },
    {
        "key": "ctrl+e",
        "command": "workbench.action.focusFirstEditorGroup"
    },
    {
        "key": "cmd+1",
        "command": "-workbench.action.focusFirstEditorGroup"
    },
    {
        "key": "a",
        "command": "explorer.newFile",
        "when": "filesExplorerFocus && !inputFocus"
    },
    {
        "key": "n",
        "command": "explorer.newFolder",
        "when": "filesExplorerFocus && !inputFocus"
    },
    {
        "key": "r",
        "command": "renameFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "d",
        "command": "deleteFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "tab",
        "command": "-acceptSelectedSuggestion",
        "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
    },
    // Sympy setup
    {
        "key": "shift+e",
        "command": "latex-sympy-calculator.equal",
        "when": "editorHasSelection && editorTextFocus && resourceLangId == 'latex' || editorHasSelection && editorTextFocus && resourceLangId == 'markdown'"
    },
    {
        "key": "shift+alt+cmd+e",
        "command": "-latex-sympy-calculator.equal",
        "when": "editorHasSelection && editorTextFocus && resourceLangId == 'latex' || editorHasSelection && editorTextFocus && resourceLangId == 'markdown'"
    },
    {
        "key": "shift+r",
        "command": "latex-sympy-calculator.replace",
        "when": "editorHasSelection && editorTextFocus && resourceLangId == 'latex' || editorHasSelection && editorTextFocus && resourceLangId == 'markdown'"
    },
    {
        "key": "shift+alt+cmd+r",
        "command": "-latex-sympy-calculator.replace",
        "when": "editorHasSelection && editorTextFocus && resourceLangId == 'latex' || editorHasSelection && editorTextFocus && resourceLangId == 'markdown'"
    },
    // Auto Correction setup
    {
        "key": "cmd+l",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "cSpell.goToPreviousSpellingIssue",
                {
                    "command": "editor.action.codeAction",
                    "args": {
                        "kind": "quickfix",
                        "apply": "first"
                    }
                },
                "cursorUndo",
            ]
        }
    },
    {
        "key": "cmd+k",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "editor.action.marker.prev",
                {
                    "command": "editor.action.codeAction",
                    "args": {
                        "kind": "quickfix",
                        "apply": "first"
                    }
                },
                "cursorUndo",
            ]
        }
    },
    // Inkscape setup
    {
        "key": "ctrl+f",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "editor.action.clipboardCopyAction",
                "editor.action.insertLineAfter",
                "cursorUp",
                "editor.action.deleteLines",
                {
                    "command": "editor.action.insertSnippet",
                    "args": {
                        "name": "incfig"
                    }
                },
                {
                    "command": "command-runner.run",
                    "args": {
                        "command": "inkscapeCreate",
                    },
                    "terminal": {
                        "name": "runCommand",
                        "shellArgs": [],
                        "autoClear": true,
                        "autoFocus": false
                    }
                },
            ]
        },
        "when": "editorTextFocus && vim.active && vim.use<C-f> && !inDebugRepl && vim.mode == 'Insert'"
    },
    {
        "key": "ctrl+f",
        "command": "command-runner.run",
        "args": {
            "command": "inkscapeEdit",
            "terminal": {
                "name": "runCommand",
                "shellArgs": [],
                "autoClear": true,
                "autoFocus": false
            }
        },
        "when": "editorTextFocus && vim.active && vim.use<C-f> && !inDebugRepl && vim.mode == 'Normal'"
    },
    {
        "key": "ctrl+f",
        "command": "command-runner.run",
        "args": {
            "command": "inkscapeStart",
            "terminal": {
                "name": "runCommand",
                "shellArgs": [],
                "autoClear": true,
                "autoFocus": false
            }
        },
        "when": "editorTextFocus && vim.active && vim.use<C-f> && !inDebugRepl && vim.mode == 'Visual'"
    },
    {
        "key": "shift+cmd+k",
        "command": "-editor.action.deleteLines",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+f",
        "command": "-cursorRight",
        "when": "textInputFocus"
    },
]
